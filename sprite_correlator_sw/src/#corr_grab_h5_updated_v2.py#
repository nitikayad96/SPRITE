import sys
import os
import time
import numpy as np
import adc5g as adc
import pylab
import socket
import ami as AMI
import helpers as helpers
import control as control
import file_writer as fw
import pylab
import signal
import logging
import casperfpga
from astropy.time import Time

sys.path.append('/home/sprite/loberotator')
import update_phi_rate as fs # fringe stopping

logger = helpers.add_default_log_handlers(logging.getLogger(__name__))

def write_data(writer, d, timestamp, meta, **kwargs):
    if meta is not None:
        for entry in meta.entries:
           name = entry['name']
           if name is not 'obs_name':
               val = meta.__getattribute__(name)
               try:
                   length = len(val)
                   data_type = type(val[0])
               except TypeError:
                   length = 1
                   data_type = type(val)
               #print name,val,data_type
               writer.append_data(name, [length], val, data_type)
    writer.append_data('xeng_raw0', d.shape, d, np.int64)
    writer.append_data('timestamp0', [1], timestamp, np.int64)
    writer.append_data('timestamp_UTC', [1], time.time(), float)
    for key, value in kwargs.iteritems():
        writer.append_data(key, value.shape, value, value.dtype)

def signal_handler(signum, frame):
    """
    Run when kill signals are caught
    """
    print("Received kill signal %d. Closing files and exiting"%signum)
    writer.close_file()
    try:
        ctrl.close_sockets()
    except:
       pass #this is poor form
    exit()


if __name__ == '__main__':
    from optparse import OptionParser

    ################ Parse Arguments #########################
    p = OptionParser()
    p.set_usage('%prog [options] [CONFIG_FILE]')
    p.set_description(__doc__)
    opts, args = p.parse_args(sys.argv[1:])

    if args == []:
        config_file = None
    else:
        config_file = args[0]

    src_name = args[1]
    ra = args[2]
    dec = args[3]
    obslen = float(args[4])

    if len(args) == 6 and args[5] == 'rp':
        switch_rp = True

    else:
        switch_rp = False

    if 'lowband' in config_file:
        band = 'low'

    elif 'highband' in config_file:
        band = 'high'



    ################# Initialize observation file ######################
    writer = fw.H5Writer(config_file=config_file)
    bl_order = [[0,0], [1,1], [0,1]]
    writer.set_bl_order(bl_order)
    writer.set_source_details(src_name, ra, dec)

    ############## Initialize red pitaya values ########################

    t = Time.now()
    t.format='isot'
    start_utc = t.value
    phi_step_list = fs.calc_phi_step(ra, dec, start_utc, 2, 1)
    actual_phi_rate, rp_phi_rate = fs.calc_rp_error(phi_step_list)
    writer.set_fringe_rates(actual_phi_rate[0], rp_phi_rate[0])

    if switch_rp:
        rp = casperfpga.CasperFpga('rp-f07179.ovro.pvt')

        phi_step_32b = round(phi_step_list[0] * (2 ** 31))
        rp.write_int('phi_step', phi_step_32b)
        rp.write_int('phi_init', 0 * (2 ** 32))

    ################ Inilatize correlator values #######################
    corr = AMI.spriteSbl(config_file=config_file) #passive=True)
    time.sleep(0.1)

    xeng = corr.xengs[0]

    # some initial values for the loop
    datavec = np.zeros([corr.n_chans*corr.n_bands,corr.n_bls,corr.n_pols,2],dtype=np.int64)
    print('Shape of datavec: ', datavec.shape)
    mcnt_old = xeng.read_uint('mcnt_lsb')
    # get noise switch data
    noise_switched_data = np.zeros([corr.n_ants, corr.n_chans*corr.n_bands], dtype=np.float32)
    # ignore phasing
    phased_to = np.array([0.0, corr.array.lat_r])

    current_obs = None
    receiver_enable = False
    last_meta_timestamp = time.time()
    cnt=0
    ps = [0, 0.25, 0.5, 0.75]

    # Catch keyboard interrupt and kill signals (which are initiated by amisa over ssh)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    ################### run  data capture loop for given observation time ########################
    gathered = 0
    while gathered<int(obslen/0.24576):

        if current_obs is None:
            fname = 'corr_TEST_%d.h5'%(time.time())
            writer.start_new_file(fname)
            current_obs = 'test'

        mcnt = xeng.read_uint('mcnt_lsb')

        if mcnt != mcnt_old:
            mcnt_old = mcnt

            ps_idx = (cnt+1)%4
            if switch_rp:
                rp.write_int('phi_init', ps[ps_idx] * (2 ** 32))
                print(ps_idx)

            d = corr.snap_corr_wide(wait=True,combine_complex=False)
            cnt += 1

            if d is not None:
                datavec[:,0,0,1] = d['corr00']
                datavec[:,1,0,1] = d['corr11']
                datavec[:,2,0,1] = d['corr01'][0:2048] #datavec[:,:,:,1] should be real
                datavec[:,2,0,0] = d['corr01'][2048:] #datavec[:,:,:,0] should be imag
                print("got new correlator data from %s band with timestamp %.4f at time %.4f"%(band, d['timestamp'], time.time()))
                #txdata = np.array(d['corr01'][:], dtype=np.int32)

                write_data(writer, datavec, d['timestamp'], None,
                           noise_demod=noise_switched_data,phased_to=phased_to)

            else:
                print("Failed to send because MCNT changed during snap")


        gathered += 1
        time.sleep(0.02)
        
